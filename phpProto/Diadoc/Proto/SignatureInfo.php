<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: SignatureInfo.proto

namespace Diadoc\Api\Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Diadoc.Api.Proto.SignatureInfo</code>
 */
class SignatureInfo extends \Google\Protobuf\Internal\Message
{
    /**
     *Время фомирования подписи
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp SigningTime = 1;</code>
     */
    protected $SigningTime = null;
    /**
     *Дата проверки подписи 
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp SignatureVerificationTime = 2;</code>
     */
    protected $SignatureVerificationTime = null;
    /**
     *Результат проверки подписи
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.SignatureVerificationResult SignatureVerificationResult = 3;</code>
     */
    protected $SignatureVerificationResult = null;
    /**
     *Отпечаток сертификата
     *
     * Generated from protobuf field <code>optional string Thumbprint = 4;</code>
     */
    protected $Thumbprint = null;
    /**
     *Серийный номер
     *
     * Generated from protobuf field <code>optional string SerialNumber = 5;</code>
     */
    protected $SerialNumber = null;
    /**
     *Кем выдан 
     *
     * Generated from protobuf field <code>optional string Issuer = 6;</code>
     */
    protected $Issuer = null;
    /**
     *Дата начала действия
     *
     * Generated from protobuf field <code>optional string StartDate = 7;</code>
     */
    protected $StartDate = null;
    /**
     *Дата окончания действия
     *
     * Generated from protobuf field <code>optional string EndDate = 8;</code>
     */
    protected $EndDate = null;
    /**
     *Организация-наименование 
     *
     * Generated from protobuf field <code>optional string OrgName = 9;</code>
     */
    protected $OrgName = null;
    /**
     *Организация-ИНН 
     *
     * Generated from protobuf field <code>optional string OrgInn = 10;</code>
     */
    protected $OrgInn = null;
    /**
     *Должность 
     *
     * Generated from protobuf field <code>optional string JobTitle = 11;</code>
     */
    protected $JobTitle = null;
    /**
     *Имя-отчество 
     *
     * Generated from protobuf field <code>optional string FirstName = 12;</code>
     */
    protected $FirstName = null;
    /**
     *Фамилия 
     *
     * Generated from protobuf field <code>optional string Surname = 13;</code>
     */
    protected $Surname = null;
    /**
     *СНИЛС 
     *
     * Generated from protobuf field <code>optional string Snils = 14;</code>
     */
    protected $Snils = null;
    /**
     *Email 
     *
     * Generated from protobuf field <code>optional string Email = 15;</code>
     */
    protected $Email = null;
    /**
     * Тип владельца сертификата
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.CertificateSubjectType CertificateSubjectType = 16 [default = UnknownCertificateSubjectType];</code>
     */
    protected $CertificateSubjectType = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Diadoc\Api\Proto\Timestamp $SigningTime
     *          Время фомирования подписи
     *     @type \Diadoc\Api\Proto\Timestamp $SignatureVerificationTime
     *          Дата проверки подписи 
     *     @type \Diadoc\Api\Proto\SignatureVerificationResult $SignatureVerificationResult
     *          Результат проверки подписи
     *     @type string $Thumbprint
     *          Отпечаток сертификата
     *     @type string $SerialNumber
     *          Серийный номер
     *     @type string $Issuer
     *          Кем выдан 
     *     @type string $StartDate
     *          Дата начала действия
     *     @type string $EndDate
     *          Дата окончания действия
     *     @type string $OrgName
     *          Организация-наименование 
     *     @type string $OrgInn
     *          Организация-ИНН 
     *     @type string $JobTitle
     *          Должность 
     *     @type string $FirstName
     *          Имя-отчество 
     *     @type string $Surname
     *          Фамилия 
     *     @type string $Snils
     *          СНИЛС 
     *     @type string $Email
     *          Email 
     *     @type int $CertificateSubjectType
     *           Тип владельца сертификата
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\SignatureInfo::initOnce();
        parent::__construct($data);
    }

    /**
     *Время фомирования подписи
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp SigningTime = 1;</code>
     * @return \Diadoc\Api\Proto\Timestamp|null
     */
    public function getSigningTime()
    {
        return $this->SigningTime;
    }

    public function hasSigningTime()
    {
        return isset($this->SigningTime);
    }

    public function clearSigningTime()
    {
        unset($this->SigningTime);
    }

    /**
     *Время фомирования подписи
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp SigningTime = 1;</code>
     * @param \Diadoc\Api\Proto\Timestamp $var
     * @return $this
     */
    public function setSigningTime($var)
    {
        GPBUtil::checkMessage($var, \Diadoc\Api\Proto\Timestamp::class);
        $this->SigningTime = $var;

        return $this;
    }

    /**
     *Дата проверки подписи 
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp SignatureVerificationTime = 2;</code>
     * @return \Diadoc\Api\Proto\Timestamp|null
     */
    public function getSignatureVerificationTime()
    {
        return $this->SignatureVerificationTime;
    }

    public function hasSignatureVerificationTime()
    {
        return isset($this->SignatureVerificationTime);
    }

    public function clearSignatureVerificationTime()
    {
        unset($this->SignatureVerificationTime);
    }

    /**
     *Дата проверки подписи 
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp SignatureVerificationTime = 2;</code>
     * @param \Diadoc\Api\Proto\Timestamp $var
     * @return $this
     */
    public function setSignatureVerificationTime($var)
    {
        GPBUtil::checkMessage($var, \Diadoc\Api\Proto\Timestamp::class);
        $this->SignatureVerificationTime = $var;

        return $this;
    }

    /**
     *Результат проверки подписи
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.SignatureVerificationResult SignatureVerificationResult = 3;</code>
     * @return \Diadoc\Api\Proto\SignatureVerificationResult|null
     */
    public function getSignatureVerificationResult()
    {
        return $this->SignatureVerificationResult;
    }

    public function hasSignatureVerificationResult()
    {
        return isset($this->SignatureVerificationResult);
    }

    public function clearSignatureVerificationResult()
    {
        unset($this->SignatureVerificationResult);
    }

    /**
     *Результат проверки подписи
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.SignatureVerificationResult SignatureVerificationResult = 3;</code>
     * @param \Diadoc\Api\Proto\SignatureVerificationResult $var
     * @return $this
     */
    public function setSignatureVerificationResult($var)
    {
        GPBUtil::checkMessage($var, \Diadoc\Api\Proto\SignatureVerificationResult::class);
        $this->SignatureVerificationResult = $var;

        return $this;
    }

    /**
     *Отпечаток сертификата
     *
     * Generated from protobuf field <code>optional string Thumbprint = 4;</code>
     * @return string
     */
    public function getThumbprint()
    {
        return isset($this->Thumbprint) ? $this->Thumbprint : '';
    }

    public function hasThumbprint()
    {
        return isset($this->Thumbprint);
    }

    public function clearThumbprint()
    {
        unset($this->Thumbprint);
    }

    /**
     *Отпечаток сертификата
     *
     * Generated from protobuf field <code>optional string Thumbprint = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setThumbprint($var)
    {
        GPBUtil::checkString($var, True);
        $this->Thumbprint = $var;

        return $this;
    }

    /**
     *Серийный номер
     *
     * Generated from protobuf field <code>optional string SerialNumber = 5;</code>
     * @return string
     */
    public function getSerialNumber()
    {
        return isset($this->SerialNumber) ? $this->SerialNumber : '';
    }

    public function hasSerialNumber()
    {
        return isset($this->SerialNumber);
    }

    public function clearSerialNumber()
    {
        unset($this->SerialNumber);
    }

    /**
     *Серийный номер
     *
     * Generated from protobuf field <code>optional string SerialNumber = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setSerialNumber($var)
    {
        GPBUtil::checkString($var, True);
        $this->SerialNumber = $var;

        return $this;
    }

    /**
     *Кем выдан 
     *
     * Generated from protobuf field <code>optional string Issuer = 6;</code>
     * @return string
     */
    public function getIssuer()
    {
        return isset($this->Issuer) ? $this->Issuer : '';
    }

    public function hasIssuer()
    {
        return isset($this->Issuer);
    }

    public function clearIssuer()
    {
        unset($this->Issuer);
    }

    /**
     *Кем выдан 
     *
     * Generated from protobuf field <code>optional string Issuer = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setIssuer($var)
    {
        GPBUtil::checkString($var, True);
        $this->Issuer = $var;

        return $this;
    }

    /**
     *Дата начала действия
     *
     * Generated from protobuf field <code>optional string StartDate = 7;</code>
     * @return string
     */
    public function getStartDate()
    {
        return isset($this->StartDate) ? $this->StartDate : '';
    }

    public function hasStartDate()
    {
        return isset($this->StartDate);
    }

    public function clearStartDate()
    {
        unset($this->StartDate);
    }

    /**
     *Дата начала действия
     *
     * Generated from protobuf field <code>optional string StartDate = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setStartDate($var)
    {
        GPBUtil::checkString($var, True);
        $this->StartDate = $var;

        return $this;
    }

    /**
     *Дата окончания действия
     *
     * Generated from protobuf field <code>optional string EndDate = 8;</code>
     * @return string
     */
    public function getEndDate()
    {
        return isset($this->EndDate) ? $this->EndDate : '';
    }

    public function hasEndDate()
    {
        return isset($this->EndDate);
    }

    public function clearEndDate()
    {
        unset($this->EndDate);
    }

    /**
     *Дата окончания действия
     *
     * Generated from protobuf field <code>optional string EndDate = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setEndDate($var)
    {
        GPBUtil::checkString($var, True);
        $this->EndDate = $var;

        return $this;
    }

    /**
     *Организация-наименование 
     *
     * Generated from protobuf field <code>optional string OrgName = 9;</code>
     * @return string
     */
    public function getOrgName()
    {
        return isset($this->OrgName) ? $this->OrgName : '';
    }

    public function hasOrgName()
    {
        return isset($this->OrgName);
    }

    public function clearOrgName()
    {
        unset($this->OrgName);
    }

    /**
     *Организация-наименование 
     *
     * Generated from protobuf field <code>optional string OrgName = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setOrgName($var)
    {
        GPBUtil::checkString($var, True);
        $this->OrgName = $var;

        return $this;
    }

    /**
     *Организация-ИНН 
     *
     * Generated from protobuf field <code>optional string OrgInn = 10;</code>
     * @return string
     */
    public function getOrgInn()
    {
        return isset($this->OrgInn) ? $this->OrgInn : '';
    }

    public function hasOrgInn()
    {
        return isset($this->OrgInn);
    }

    public function clearOrgInn()
    {
        unset($this->OrgInn);
    }

    /**
     *Организация-ИНН 
     *
     * Generated from protobuf field <code>optional string OrgInn = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setOrgInn($var)
    {
        GPBUtil::checkString($var, True);
        $this->OrgInn = $var;

        return $this;
    }

    /**
     *Должность 
     *
     * Generated from protobuf field <code>optional string JobTitle = 11;</code>
     * @return string
     */
    public function getJobTitle()
    {
        return isset($this->JobTitle) ? $this->JobTitle : '';
    }

    public function hasJobTitle()
    {
        return isset($this->JobTitle);
    }

    public function clearJobTitle()
    {
        unset($this->JobTitle);
    }

    /**
     *Должность 
     *
     * Generated from protobuf field <code>optional string JobTitle = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setJobTitle($var)
    {
        GPBUtil::checkString($var, True);
        $this->JobTitle = $var;

        return $this;
    }

    /**
     *Имя-отчество 
     *
     * Generated from protobuf field <code>optional string FirstName = 12;</code>
     * @return string
     */
    public function getFirstName()
    {
        return isset($this->FirstName) ? $this->FirstName : '';
    }

    public function hasFirstName()
    {
        return isset($this->FirstName);
    }

    public function clearFirstName()
    {
        unset($this->FirstName);
    }

    /**
     *Имя-отчество 
     *
     * Generated from protobuf field <code>optional string FirstName = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setFirstName($var)
    {
        GPBUtil::checkString($var, True);
        $this->FirstName = $var;

        return $this;
    }

    /**
     *Фамилия 
     *
     * Generated from protobuf field <code>optional string Surname = 13;</code>
     * @return string
     */
    public function getSurname()
    {
        return isset($this->Surname) ? $this->Surname : '';
    }

    public function hasSurname()
    {
        return isset($this->Surname);
    }

    public function clearSurname()
    {
        unset($this->Surname);
    }

    /**
     *Фамилия 
     *
     * Generated from protobuf field <code>optional string Surname = 13;</code>
     * @param string $var
     * @return $this
     */
    public function setSurname($var)
    {
        GPBUtil::checkString($var, True);
        $this->Surname = $var;

        return $this;
    }

    /**
     *СНИЛС 
     *
     * Generated from protobuf field <code>optional string Snils = 14;</code>
     * @return string
     */
    public function getSnils()
    {
        return isset($this->Snils) ? $this->Snils : '';
    }

    public function hasSnils()
    {
        return isset($this->Snils);
    }

    public function clearSnils()
    {
        unset($this->Snils);
    }

    /**
     *СНИЛС 
     *
     * Generated from protobuf field <code>optional string Snils = 14;</code>
     * @param string $var
     * @return $this
     */
    public function setSnils($var)
    {
        GPBUtil::checkString($var, True);
        $this->Snils = $var;

        return $this;
    }

    /**
     *Email 
     *
     * Generated from protobuf field <code>optional string Email = 15;</code>
     * @return string
     */
    public function getEmail()
    {
        return isset($this->Email) ? $this->Email : '';
    }

    public function hasEmail()
    {
        return isset($this->Email);
    }

    public function clearEmail()
    {
        unset($this->Email);
    }

    /**
     *Email 
     *
     * Generated from protobuf field <code>optional string Email = 15;</code>
     * @param string $var
     * @return $this
     */
    public function setEmail($var)
    {
        GPBUtil::checkString($var, True);
        $this->Email = $var;

        return $this;
    }

    /**
     * Тип владельца сертификата
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.CertificateSubjectType CertificateSubjectType = 16 [default = UnknownCertificateSubjectType];</code>
     * @return int
     */
    public function getCertificateSubjectType()
    {
        return isset($this->CertificateSubjectType) ? $this->CertificateSubjectType : 0;
    }

    public function hasCertificateSubjectType()
    {
        return isset($this->CertificateSubjectType);
    }

    public function clearCertificateSubjectType()
    {
        unset($this->CertificateSubjectType);
    }

    /**
     * Тип владельца сертификата
     *
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.CertificateSubjectType CertificateSubjectType = 16 [default = UnknownCertificateSubjectType];</code>
     * @param int $var
     * @return $this
     */
    public function setCertificateSubjectType($var)
    {
        GPBUtil::checkEnum($var, \Diadoc\Api\Proto\CertificateSubjectType::class);
        $this->CertificateSubjectType = $var;

        return $this;
    }

}

